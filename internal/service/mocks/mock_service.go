// Code generated by MockGen. DO NOT EDIT.
// Source: go-shop-service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/StarkovPO/Go-shop-final/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStoreInterface is a mock of StoreInterface interface.
type MockStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreInterfaceMockRecorder
}

// MockStoreInterfaceMockRecorder is the mock recorder for MockStoreInterface.
type MockStoreInterfaceMockRecorder struct {
	mock *MockStoreInterface
}

// NewMockStoreInterface creates a new mock instance.
func NewMockStoreInterface(ctrl *gomock.Controller) *MockStoreInterface {
	mock := &MockStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreInterface) EXPECT() *MockStoreInterfaceMockRecorder {
	return m.recorder
}

// CheckLogin mocks base method.
func (m *MockStoreInterface) CheckLogin(ctx context.Context, login string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", ctx, login)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockStoreInterfaceMockRecorder) CheckLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockStoreInterface)(nil).CheckLogin), ctx, login)
}

// CreateUserDB mocks base method.
func (m *MockStoreInterface) CreateUserDB(ctx context.Context, user models.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDB", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserDB indicates an expected call of CreateUserDB.
func (mr *MockStoreInterfaceMockRecorder) CreateUserDB(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDB", reflect.TypeOf((*MockStoreInterface)(nil).CreateUserDB), ctx, user)
}

// CreateUserOrderDB mocks base method.
func (m *MockStoreInterface) CreateUserOrderDB(ctx context.Context, order models.OrderFromService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserOrderDB", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserOrderDB indicates an expected call of CreateUserOrderDB.
func (mr *MockStoreInterfaceMockRecorder) CreateUserOrderDB(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOrderDB", reflect.TypeOf((*MockStoreInterface)(nil).CreateUserOrderDB), ctx, order)
}

// CreateWithdraw mocks base method.
func (m *MockStoreInterface) CreateWithdraw(ctx context.Context, req models.Withdrawn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockStoreInterfaceMockRecorder) CreateWithdraw(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockStoreInterface)(nil).CreateWithdraw), ctx, req)
}

// GetUserBalanceDB mocks base method.
func (m *MockStoreInterface) GetUserBalanceDB(ctx context.Context, UID string) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceDB", ctx, UID)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceDB indicates an expected call of GetUserBalanceDB.
func (mr *MockStoreInterfaceMockRecorder) GetUserBalanceDB(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceDB", reflect.TypeOf((*MockStoreInterface)(nil).GetUserBalanceDB), ctx, UID)
}

// GetUserID mocks base method.
func (m *MockStoreInterface) GetUserID(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockStoreInterfaceMockRecorder) GetUserID(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockStoreInterface)(nil).GetUserID), ctx, login)
}

// GetUserOrders mocks base method.
func (m *MockStoreInterface) GetUserOrders(ctx context.Context, UID string) ([]models.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, UID)
	ret0, _ := ret[0].([]models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockStoreInterfaceMockRecorder) GetUserOrders(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockStoreInterface)(nil).GetUserOrders), ctx, UID)
}

// GetUserPass mocks base method.
func (m *MockStoreInterface) GetUserPass(ctx context.Context, login string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPass", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUserPass indicates an expected call of GetUserPass.
func (mr *MockStoreInterfaceMockRecorder) GetUserPass(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPass", reflect.TypeOf((*MockStoreInterface)(nil).GetUserPass), ctx, login)
}

// GetUserWithdrawnDB mocks base method.
func (m *MockStoreInterface) GetUserWithdrawnDB(ctx context.Context, UID string) ([]models.Withdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawnDB", ctx, UID)
	ret0, _ := ret[0].([]models.Withdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawnDB indicates an expected call of GetUserWithdrawnDB.
func (mr *MockStoreInterfaceMockRecorder) GetUserWithdrawnDB(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawnDB", reflect.TypeOf((*MockStoreInterface)(nil).GetUserWithdrawnDB), ctx, UID)
}

// IncreaseUserBalance mocks base method.
func (m *MockStoreInterface) IncreaseUserBalance(ctx context.Context, accrual float64, UID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseUserBalance", ctx, accrual, UID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseUserBalance indicates an expected call of IncreaseUserBalance.
func (mr *MockStoreInterfaceMockRecorder) IncreaseUserBalance(ctx, accrual, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseUserBalance", reflect.TypeOf((*MockStoreInterface)(nil).IncreaseUserBalance), ctx, accrual, UID)
}

// UpdateOrderStatus mocks base method.
func (m *MockStoreInterface) UpdateOrderStatus(ctx context.Context, status, UID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, status, UID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreInterfaceMockRecorder) UpdateOrderStatus(ctx, status, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStoreInterface)(nil).UpdateOrderStatus), ctx, status, UID)
}
