// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	models "github.com/StarkovPO/Go-shop-final/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockServiceInterface) CreateUser(ctx context.Context, req models.Users) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceInterfaceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockServiceInterface)(nil).CreateUser), ctx, req)
}

// CreateUserOrder mocks base method.
func (m *MockServiceInterface) CreateUserOrder(ctx context.Context, req models.Orders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserOrder", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserOrder indicates an expected call of CreateUserOrder.
func (mr *MockServiceInterfaceMockRecorder) CreateUserOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOrder", reflect.TypeOf((*MockServiceInterface)(nil).CreateUserOrder), ctx, req)
}

// CreateUserWithdraw mocks base method.
func (m *MockServiceInterface) CreateUserWithdraw(ctx context.Context, req models.Withdrawn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserWithdraw", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserWithdraw indicates an expected call of CreateUserWithdraw.
func (mr *MockServiceInterfaceMockRecorder) CreateUserWithdraw(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserWithdraw", reflect.TypeOf((*MockServiceInterface)(nil).CreateUserWithdraw), ctx, req)
}

// GenerateUserToken mocks base method.
func (m *MockServiceInterface) GenerateUserToken(ctx context.Context, req models.Users) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserToken", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserToken indicates an expected call of GenerateUserToken.
func (mr *MockServiceInterfaceMockRecorder) GenerateUserToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserToken", reflect.TypeOf((*MockServiceInterface)(nil).GenerateUserToken), ctx, req)
}

// GetUserBalance mocks base method.
func (m *MockServiceInterface) GetUserBalance(ctx context.Context, UID string) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, UID)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockServiceInterfaceMockRecorder) GetUserBalance(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockServiceInterface)(nil).GetUserBalance), ctx, UID)
}

// GetUserOrders mocks base method.
func (m *MockServiceInterface) GetUserOrders(ctx context.Context, UID string) ([]models.Orders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, UID)
	ret0, _ := ret[0].([]models.Orders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockServiceInterfaceMockRecorder) GetUserOrders(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockServiceInterface)(nil).GetUserOrders), ctx, UID)
}

// GetUserWithdrawn mocks base method.
func (m *MockServiceInterface) GetUserWithdrawn(ctx context.Context, UID string) ([]models.Withdrawn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawn", ctx, UID)
	ret0, _ := ret[0].([]models.Withdrawn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawn indicates an expected call of GetUserWithdrawn.
func (mr *MockServiceInterfaceMockRecorder) GetUserWithdrawn(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawn", reflect.TypeOf((*MockServiceInterface)(nil).GetUserWithdrawn), ctx, UID)
}
